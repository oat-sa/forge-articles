{{>toc}}

h1. Make a new extension

h2. Preparation

# Install TAO (2.6)
# Download attachment:taoDocs_26_tutorial.zip
# Unzip it in your tao root folder
# Make sure your webserver has read/write access to taoDocs

h3. Install the extension

# Log into Tao Back Office with your TaoManager account
# Go to "Settings"(upper right corner) -> "Extensions Manager"
# Select taoDocs, and install it

h2. Simple Examples

h3. Hello World

* Create the @TestController.php@ in the actions folder 
<pre><code class="php"><?php
namespace oat\taoDocs\actions;

class TestController extends \tao_actions_CommonModule {
}</code></pre>

* Create the @sayHello()@ method
<pre><code class="php">
     public function sayHello() {
          echo 'Hello World';
     }
</code></pre>

* Before you can test it, you will need to run the script *funcAcl/scripts/taoPreparePublicActions.php* (in a shell using php). This will grant you access to the newly created action.
  For example:<pre>sudo -u www-data php funcAcl/scripts/taoPreparePublicActions.php</pre> 

* To run the action visit _ROOT_URL/taoDocs/TestController/sayHello_ (if your TAO Home is http://localhost/myinstall/tao/Main/index this would translate to http://localhost/myinstall/taoDocs/TestController/sayHello). If you get an "Access Denied" instead of the expected Hello world message, make sure you properly set up the extension in tao as described in the preparation step of this tutorial here above. Make sure, www-data may fully access the files on the file system of your extension.



h3. Hello Template

* Create the @hello.tpl@ file in views/templates
<pre><code class="php">
     <span>Hello <?=get_data('name')?></span>
</code></pre>
* Update the @sayHello()@ method to define the template and the parameter _(URL:/taoDocs/TestController/sayHello)_
<pre><code class="php">
     public function sayHello() {
          $this->setData('name', 'bertrand');
          $this->setView('hello.tpl');
     }
</code></pre>

* To test this action visit _(URL:/taoDocs/TestController/sayHello)_

h3. Hello Parameter

* Update the @sayHello()@ method to use the GET parameter "name"
<pre><code class="php">
     public function sayHello() {
          if($this->hasRequestParameter('name')){
               $name = $this->getRequestParameter('name');
          }
          else{
               $name = 'everybody';
          }
          $this->setData('name', $name);
          $this->setView('hello.tpl');
     }
</code></pre>

* Pass the parameter "name" in the url to test it _(URL:/taoDocs/TestController/sayHello?name=bertrand)_

h2. Integration with TAO

h3. Adding a structure

* Open the @actions/structures.xml@
* Add the following structure into @structures@ in the @structures.xml@ file
<pre><code class="php">
<structure id='taoDocs' name="Documents" level="7" visible="true">
  <description>An example extension.</description>
  <sections>
    <section id="manage_docs" name="Manage documents" url="/taoDocs/Browser/index">
      <trees>
      </trees>
      <actions>
      </actions>
    </section>
  </sections>
</structure></code></pre>
* Since Tao 2.6 the structures are cached, so you will need to empty your cache (by default situated in generis/data/generis/cache)
* When refreshing the TAO home screen, the new extension should be visible

h3. Adding a tree

* Add the tag into @trees@ in the @structures.xml@ file, and empty the cache once more.
<pre><code class="xml">
<tree name="Documents library" dataUrl="/taoDocs/Browser/getTreeData" editInstanceUrl="/taoDocs/Browser/editDocument" />
</code></pre>

* The extension taoDocs now shows a list of the files in it

h3. Adding an action

* Add the tag into @actions@ in the @structures.xml@ file, and empty the cache once more.
<pre><code class="xml">
<action name="delete" url="/taoDocs/Browser/delete" context="instance" />
</code></pre>

* Add the following code to the @Browser.php@ in @actions@
<pre><code class="php">
public function delete(){
	$filepath = DOCS_PATH.$this->getRequestParameter('uri');
	$deleted = \taoDocs_helpers_FileUtils::deleteFile($filepath);
	if ($deleted) {
		$this->setView('confirmDel.tpl');
		//remove the current selection from the session
		$this->removeSessionAttribute('uri');
	}
}
</code></pre>

* After refreshing the page, you will see a disabled delete button at the bottom of the Tree. Selecting a file will activate it, and allow you to delete the file.

* If you wish you can now try to add your own actions, like duplicating a file, or creating a form to upload new files
