h1. Javascript unit tests

h2. Setup

<pre>
cd tao/views/build
npm install
</pre>

h2. Running tests

h3. All tests:

<pre>
grunt testall
</pre>

h3. Specific extension:

<pre>
cd tao/views/build
grunt connect [extname+test]
grunt connect taoqtiitemtest
grunt connect taotest
...
</pre>

h3. Specific test:

You can either open the test.html in a browser or adapt the following command line:

<pre>
cd tao/views/build
grunt connect qunit:single --test=[/path/to/test.html]
grunt connect qunit:single --test=/taoQtiItem/views/js/qtiCreator/test/MathEditor/test.html
...
</pre>

h2. Failing tests

In case you have failing tests:
* make sure that you have the latest version of all tao extensions
* make sure that you have the latest npm dependencies (like PhantomJS) with npm update (or remove node_modules directory, then run npm install again)

To help debugging unit tests that only fail when run with grunt, you can launch the test webserver...
<pre>grunt connect::keepalive

Running "connect:test:keepalive" (connect) task
Waiting forever...
Started connect web server on http://127.0.0.1:8082</pre>

... then open the test in your browser

<pre>http://127.0.0.1:8082/taoQtiItem/views/js/qtiCreator/test/MathEditor/test.html</pre>

tadam .... !

h2. Writing tests

Store your tests in the following directory, so they are run by the CI engine:

<pre>
extension/views/js/test/
</pre>

Create with a subdirectory containing the two following files:

h3. test.html

Use the following template:

<pre>
<!DOCTYPE html>
<html>
   <head>
       <meta charset="utf-8">
       <title>XXX TEST TITLE XXX</title>
       <link rel="stylesheet" type="text/css" href="/tao/views/js/lib/qunit/qunit.css">
       <script type="text/javascript" src="/tao/views/js/lib/require.js"></script>
       <script type="text/javascript" src="/tao/views/js/lib/qunit/qunit.js"></script>
       <script type="text/javascript" src="/tao/views/js/lib/qunit/qunit-parameterize.js"></script>
       <script type="text/javascript" src="/tao/views/js/lib/blanket/blanket.min.js" data-cover-only="/taoQtiItem/views/js/qtiCreator/editor/MathEditor.js"></script>
       <script  type="text/javascript">
           QUnit.config.autostart = false;
           require(['/tao/ClientConfig/config'], function(){
               require(['taoQtiItem/qtiCreator/test/MathEditor/test'], function(){
                   QUnit.start();
               });
           });
       </script>
   </head>
   <body>
       <div id="qunit"></div>
       <div id="qunit-fixture"></div>
   </body>
</html>
</pre>

Customise:
* the test title
* the path to the test file, starting with the extension folder and omitting the view/js subdirectories
* you can put all you want in the #qunit-fixture div, this will be cleaned after each test so you will not have side effect.

Optionnal dependencies:
* blanket adds code coverage. Specify the file to cover with the _data-cover-only_ attribute.
* parameterize is a QUnit plugin useful for parameterized tests https://github.com/AStepaniuk/qunit-parameterize

h3. test.js

<pre>
define([
    'jquery',
    'your/plugin'
], function($, plugin){
    'use strict';

    QUnit.module('plugin');

    QUnit.test('module', function(assert){
        QUnit.expect(1);

        assert.ok(typeof plugin === 'function', 'The module expose a function');
    });

});
</pre>

* we need all tests cases to be wrapped under a QUnit.module (for reporting)
* for an example of parameterized test, see https://github.com/oat-sa/tao-core/blob/develop/views/js/test/core/encoder/str2array/test.js