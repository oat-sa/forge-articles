h1. Data abstractions 2.6

This document describes abstractions available for Tao 2.6. Please see [[Data abstractions]] for the current version of Tao.

{{>toc}}

There are currently 5 distinct storages that are used during the delivery:

h2. Result storage abstraction

The choice of a Result Storage implementation is done by configuring a Result Server. Each delivery is configured with one result server. 
This happens in the back office user interface respectively into the "Result Servers Management" and "Delivery" tabs. 

Two major implementation of result Storage exist: 
#  taoResults
#  keyValueResultStorage 


The KeyValue Result storage implementation may be installed and configured under the following conditions: 
* Make sure you have installed the packages :
"redis-server" (on the server you want to use for the storage) 
"phpredis" on the TAO application server

* In the extension manager, install the extension called taoAltResultStorage. If you switch to the tab called "Manage Result Server", you will be able to see a new result Server called KeyValueResults.


* If you have chosen to use a remote redis server or wanted to have redis running on a different port than the default one (6379). You may have to adapt the configuration file _generis/common/conf/default/persistences.conf.php_

<pre><code class="php">
'keyValueResult' => array(
	    'driver' => 'phpredis',
            'host' => '127.0.0.1',
            'port' => 6379
	)
</code></pre>

* When you configure a delivery, you may now decide to send the results to the redis server, choose the option _KeyValueResultStorage_ in the delivery configuration tool.

h2. Service state storage abstraction

The service state storage manages the state of any service that has been started. This can include among many the states of items (selected responses), states of the test(current item) and state of the delivery. This is always stored in the key-value persistence identified by *'serviceState'*.

h3. Storing service states in the filesystem (default)

The default persistence is defined in _generis/common/conf/default/persistences.conf.php_ and will store the state of the services in the directory _generis/data/serviceState_.

<pre><code class="php">'serviceState' => array(
    'driver' => 'phpfile',
)</code></pre>

h3. Storing service states in a Redis server

If you prefer to store these states in an alternativ storage copy the file _generis/common/conf/default/persistences.conf.php_ to _generis/common/conf/persistences.conf.php__generis.conf.php_ and modify the 'serviceState' entry to the following:

<pre><code class="php">'serviceState' => array(
    'driver' => 'phpredis',
    'host' => '127.0.0.1',
    'port' => 6379
)</code></pre>

h2. Delivery execution informations storage abstraction

Delivery execution information cover everything related to what test taker has started/finished which delivery. The choice of the abstraction is done via the constant  _DELIVERY_EXECUTION_HANDLER_ in _generis/common/conf/generis.conf.php_.

h3. Storing delivery execution informations in the ontology (default)

<pre><code class="php">
define('DELIVERY_EXECUTION_HANDLER', 'taoDelivery_models_classes_execution_OntologyService');
</code></pre>

h3. Storing delivery execution informations in a key-value server 

To switch to a KeyValue persistence the constant _DELIVERY_EXECUTION_HANDLER_ in _generis.conf.php_ needs to be set to _taoDelivery_models_classes_execution_KeyValueService_:

<pre><code class="php">
define('DELIVERY_EXECUTION_HANDLER', 'taoDelivery_models_classes_execution_KeyValueService');
</code></pre>

Additionally the persistence used by the key value service needs to be defined in _persistences.conf.php_. If you would like to use Redis you would add the following block:

<pre><code class="php">'deliveryExecution' => array(
    'driver' => 'phpredis',
    'host' => '127.0.0.1',
    'port' => 6379
)</code></pre>

h2. PHP session storage abstraction

This abstraction allows to use user-level session storage, for storing and retrieving data associated with a session.
See also: http://php.net/manual/en/function.session-set-save-handler.php

h3. System session storage (default)

By default the PHP environment will handle all session storage and retrieval on a system-level.

h3. Storing the session in a key-value server

To enable the user-level key-value storage of the php session uncomment the following line in _generis/common/conf/generis.conf_:

<pre><code class="php">
# default will use defautl php session handling
define('PHP_SESSION_HANDLER', 'common_session_php_KeyValueSessionHandler');
</code></pre>

The persistence used for the session is defined in _persistences.conf.php_ and set to _SqlKvWrapper_ by default. If you wish to switch to Redis exchange the session configuration with the following:

<pre><code class="php">'session' => array(
    'driver' => 'phpredis',
    'host' => '127.0.0.1',
    'port' => 6379
)</code></pre>

h2. URI provider

The URI provider is used to generate new URIs for newly created resources. If multiple application servers are used for delivering tests in Tao these application servers need to ensure that they don't generate conflicting URIs and therefore should use a common URI provider.

h3. Using the SQL server as URI provider (default)

By default Generis uses the SQL database to generate new URIs

<pre><code class="php">
define('GENERIS_URI_PROVIDER', 'DatabaseSerialUriProvider');
</code></pre>

h3. Using the key-value server as URI provider

To switch to a the advanced key-value implementation the constant GENERIS_URI_PROVIDER in generis.conf.php needs to be changed:

<pre><code class="php">
define('GENERIS_URI_PROVIDER', 'AdvKeyValueUriProvider');
</code></pre>

<pre><code class="php">'uriProvider' => array(
    'driver' => 'phpredis',
    'host' => '127.0.0.1',
    'port' => 6379
)</code></pre>