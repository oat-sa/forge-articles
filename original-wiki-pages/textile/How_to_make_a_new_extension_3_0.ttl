{{>toc}}

h1. How to make a new extension 3 0

h2. Preparation

# Install TAO (3.0) with the development tools (https://github.com/oat-sa/extension-tao-devtools)
# Make sure the extension taoDevTools has been installed.

h2. Create the extension

# Log into Tao Back Office with your TaoManager account
# Go to "Settings"(upper right corner) -> "Extensions Manager"
# Click on "create new" to create your new extension
# Fill out the form and call your new extension "taoDocs" ( you can select some _Samples_ to generate extra  structure, according to your choice ) 
# Return to the extension manager, select taoDocs, and install it

h2. Simple Examples

h3. Hello World

* Create the @TestController.php@ in the @controller@ folder 
<pre><code class="php"><?php
namespace oat\taoDocs\controller;

class TestController extends \tao_actions_CommonModule
{

}</code></pre>

* Create the @sayHello()@ method
<pre><code class="php">
     public function sayHello()
     {
          echo 'Hello World';
     }
</code></pre>


* To run the action visit _ROOT_URL/taoDocs/TestController/sayHello_ (if your TAO Home is http://localhost/myinstall/tao/Main/index this would translate to http://localhost/myinstall/taoDocs/TestController/sayHello). If you get an "Access Denied" instead of the expected Hello world message, make sure you properly set up the extension in tao as described in the preparation step of this tutorial here above. Make sure, www-data may fully access the files on the file system of your extension.

h3. Hello Template

* Create the @hello.tpl@ file in views/templates
<pre><code class="php">
     <span>Hello <?=get_data('name')?></span>
</code></pre>
* Update the @sayHello()@ method to define the template and the parameter _(URL:/taoDocs/TestController/sayHello)_
<pre><code class="php">
     public function sayHello()
     {
          $this->setData('name', 'bertrand');
          $this->setView('hello.tpl');
     }
</code></pre>

* To test this action visit _(URL:/taoDocs/TestController/sayHello)_

h3. Hello Parameter

* Update the @sayHello()@ method to use the GET parameter "name"
<pre><code class="php">
     public function sayHello()
     {
        if ($this->hasRequestParameter('name')) {
            $name = $this->getRequestParameter('name');
        } else {
            $name = 'everybody';
        }
        $this->setData('name', $name);
        $this->setView('hello.tpl');
     }
</code></pre>

* Pass the parameter "name" in the url to test it _(URL:/taoDocs/TestController/sayHello?name=bertrand)_

h2. Integration with TAO

h3. Adding a structure

* Open the @controller/structures.xml@ ( see more at [[Tao_30_structuresxml_format| guide about structures.xml ]] ) 
* Add a new structure with a section
** In the @structures.xml@ add the tag
<pre><code class="xml">
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE structures SYSTEM "../doc/structures.dtd">
<structures>
    <structure id="taoDocs_main" name="taoDocs" level="17" group="main">
        <description/>
        <sections>
            <section id="taoDocs_say" name="taoDocs" url="/taoDocs/TestController/sayHello"/>
        </sections>
    </structure>
</structures>
</code></pre>
* Since Tao 2.6 the structures are cached, so you will need to empty your cache (by default situated in _data/generis/cache_. Also you can use taoDevTools scripts) 
* When refreshing the TAO home screen, the new extension should be visible

h3. Adding a tree

* Add the tag into @trees@ in the @structures.xml@ file ( [[How_to_add_a_new_items_type|How to add a new items type]] ) 
<pre><code class="xml">
<section id="taoDocs_say" name="taoDocs" url="/taoDocs/TestController/sayHello">
    <trees>
        <tree name="Documents library" 
                  dataUrl="/taoDocs/Browser/getTreeData"
                  className="Group"
                  selectClass="Edit class"
                  selectInstance="Edit group"
                  delete="delete"/>
    </trees>
</section>
        
</code></pre>

NOTE: You should clear cache after each change of structures.xml.

h3. Adding a Controller

* Now you can reload page and see error. It's because you should create controller for our tree of documents. Example of Browser controller is attached ( attachment:Browser.php ). Download and place this file to @controller@ folder.
* Browser controller need two dependent classes: *DocsService* ( attachment:DocsService.php ) and *FileUtils* ( attachment:FileUtils.php ). This files should be downloaded and placed to @model@ and @helpers@ folders respectively. You need create this folders if it not exists.
* Now we see error about undefined @DOCS_PATH@ constant. Constants in extension usually stored in @includes/constants.php@. Create folder and file and insert into code from section below.
<pre><code class="php">
$todefine = [
    'DOCS_PATH' => ROOT_PATH . 'taoDocs/views/docs/'
];
</code></pre>
Our documents will be placed on @taoDocs/views/docs/@ folder. Also you need create this folder and place to there or create some files. 
* If you placed some files to created folder, the extension taoDocs now should shows a list of the files in it.

h3. Adding an action

* Add the tag into @actions@ in the @structures.xml@ file
<pre><code class="xml">
  <action id="delete" name="Delete" url="/taoDocs/Browser/delete" context="resource" group="tree" binding="removeNode">
      <icon id="icon-bin"/>
  </action>
</code></pre>
Attribute *id* link this actions with tree. So for Delete button we need define id as "delete", as in tree. 
Attribute *name* define text on button.
Attribute *url* define path to controller action.
Attribute *group* tell where action (button) should be placed. In our case it will be places in tree, below list of files.
Attribute *binding* define handler for this action in front-side application (javascript). How should be organised frontend application see here: [[Front_js]]

* Add the following code to the controller @Browser.php@
<pre><code class="php">
public function delete()
{
    $filepath = DOCS_PATH . $this->getRequestParameter('uri');
    $deleted = FileUtils::deleteFile($filepath);
    if ($deleted) {
        //remove the current selection from the session
        $this->removeSessionAttribute('uri');

        echo json_encode(['deleted' => 1]);
    }
}
</code></pre>

* After refreshing the page, when you select file in tree, you will see a delete button at the bottom of the Tree. Now you can delete selected file.

* If you wish you can now try to add your own actions, like duplicating a file, or creating an form to upload new files